---
import { BIOGRAPHY } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);

// Extract unique categories and tags for filtering
const categories = [...new Set(posts.map(post => (post.data as any).categories).filter(Boolean))];
const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];

const description = 'Welcome to my personal blog. Here you can find my thoughts on various topics, including machine learning, programming, and some other stuff.'
---

<Layout title="Blog" description={description}>
	<Container>
		<main class="py-12 md:py-24">
			<!-- Header Section -->
			<section class="mb-12 text-center">
				<h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">
					Blog
				</h1>
				<p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
					{description}
				</p>
			</section>

			<!-- Search and Filter Section -->
			<section class="mb-8">
				<!-- Search Bar -->
				<div class="mb-6">
					<div class="relative max-w-md mx-auto">
						<input 
							type="text" 
							id="search-input"
							placeholder="Search posts..." 
							class="w-full px-4 py-3 pl-10 pr-4 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
						/>
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
						<button 
							id="clear-search"
							class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hidden"
						>
							<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
				
				<!-- Filter Buttons -->
				<div class="flex flex-wrap gap-2 justify-center">
					<button class="filter-btn active" data-filter="all">
						All Posts
					</button>
					{categories.map(category => (
						<button class="filter-btn" data-filter={`category-${category}`}>
							{category}
						</button>
					))}
					{tags.slice(0, 5).map(tag => (
						<button class="filter-btn" data-filter={`tag-${tag}`}>
							#{tag}
						</button>
					))}
				</div>
			</section>

			<!-- Blog Grid -->
			<section>
				<!-- No results message -->
				<div id="no-results" class="text-center py-12 hidden">
					<div class="text-6xl mb-4">üîç</div>
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No posts found</h3>
					<p class="text-gray-600 dark:text-gray-400">Try adjusting your search or filter criteria</p>
				</div>
				
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
					{posts.map((post, index) => {
						const isFirstPost = index === 0;
						const postCategories = (post.data as any).categories ? [(post.data as any).categories] : [];
						const postTags = post.data.tags || [];
						const allFilters = [
							'all',
							...postCategories.map(cat => `category-${cat}`),
							...postTags.map(tag => `tag-${tag}`)
						].join(' ');
						
						return (
							<article 
								class={`blog-card group ${isFirstPost ? 'md:col-span-2 lg:col-span-1' : ''}`}
								data-filters={allFilters}
							>
								<a href={`/blog/${post.slug}/`} class="block h-full">
									<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700 h-full overflow-hidden group-hover:border-primary/20">
										{post.data.heroImage && (
											<!-- Featured Image -->
											<div class="aspect-video overflow-hidden">
												<img 
													src={post.data.heroImage} 
													alt={post.data.title}
													class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
												/>
											</div>
										)}
										
										<!-- Content -->
										<div class="p-6">
											<!-- Categories/Tags -->
											<div class="flex flex-wrap gap-2 mb-3">
												{postCategories.map(category => (
													<span class="px-2 py-1 text-xs font-medium bg-primary/10 text-primary rounded-full">
														{category}
													</span>
												))}
												{postTags.slice(0, 2).map(tag => (
													<span class="px-2 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full">
														#{tag}
													</span>
												))}
											</div>
											
											<!-- Title -->
											<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 group-hover:text-primary transition-colors duration-200 line-clamp-2">
												{post.data.title}
											</h2>
											
											<!-- Description -->
											{post.data.description && (
												<p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-3">
													{post.data.description}
												</p>
											)}
											
											<!-- Meta -->
											<div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
												<FormattedDate date={post.data.publishDate} />
												<span class="group-hover:text-primary transition-colors duration-200">
													Read more ‚Üí
												</span>
											</div>
										</div>
									</div>
								</a>
							</article>
						);
					})}
				</div>
			</section>
		</main>
	</Container>

	<style>
		.filter-btn {
			@apply px-4 py-2 text-sm font-medium text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-full hover:bg-primary hover:text-white transition-all duration-200 cursor-pointer;
		}
		
		.filter-btn.active {
			@apply bg-primary text-white;
		}
		
		.blog-card {
			@apply opacity-100 transition-all duration-300;
		}
		
		.blog-card.hidden {
			@apply opacity-0 scale-95 pointer-events-none;
		}
		
		.line-clamp-2 {
			display: -webkit-box;
			-webkit-line-clamp: 2;
			-webkit-box-orient: vertical;
			overflow: hidden;
		}
		
		.line-clamp-3 {
			display: -webkit-box;
			-webkit-line-clamp: 3;
			-webkit-box-orient: vertical;
			overflow: hidden;
		}
	</style>

	<script>
		// Search and filter functionality
		document.addEventListener('DOMContentLoaded', function() {
			const filterButtons = document.querySelectorAll('.filter-btn');
			const blogCards = document.querySelectorAll('.blog-card');
			const searchInput = document.getElementById('search-input') as HTMLInputElement;
			const clearSearchBtn = document.getElementById('clear-search');
			
			let currentFilter = 'all';
			let currentSearch = '';
			
			// Filter functionality
			filterButtons.forEach(button => {
				button.addEventListener('click', function(this: HTMLElement) {
					// Update active button
					filterButtons.forEach(btn => btn.classList.remove('active'));
					this.classList.add('active');
					
					currentFilter = this.getAttribute('data-filter') || 'all';
					applyFilters();
				});
			});
			
			// Search functionality
			searchInput?.addEventListener('input', function(this: HTMLInputElement) {
				currentSearch = this.value.toLowerCase().trim();
				applyFilters();
				
				// Show/hide clear button
				if (currentSearch) {
					clearSearchBtn?.classList.remove('hidden');
				} else {
					clearSearchBtn?.classList.add('hidden');
				}
			});
			
			// Clear search
			clearSearchBtn?.addEventListener('click', function() {
				if (searchInput) {
					searchInput.value = '';
					currentSearch = '';
					applyFilters();
					this.classList.add('hidden');
				}
			});
			
			// Apply both search and filter
			function applyFilters() {
				let visibleCount = 0;
				
				blogCards.forEach(card => {
					const filters = card.getAttribute('data-filters') || '';
					const titleElement = card.querySelector('h2');
					const descriptionElement = card.querySelector('p');
					
					const title = titleElement?.textContent?.toLowerCase() || '';
					const description = descriptionElement?.textContent?.toLowerCase() || '';
					
					// Check if matches current filter
					const matchesFilter = currentFilter === 'all' || filters.includes(currentFilter);
					
					// Check if matches search query
					const matchesSearch = !currentSearch || 
						title.includes(currentSearch) || 
						description.includes(currentSearch) ||
						Array.from(card.querySelectorAll('span')).some(span => 
							span.textContent?.toLowerCase().includes(currentSearch)
						);
					
					if (matchesFilter && matchesSearch) {
						card.classList.remove('hidden');
						visibleCount++;
					} else {
						card.classList.add('hidden');
					}
				});
				
				// Show/hide no results message
				const noResults = document.getElementById('no-results');
				if (visibleCount === 0) {
					noResults?.classList.remove('hidden');
				} else {
					noResults?.classList.add('hidden');
				}
			}
		});
	</script>
</Layout>