---
// Theme Toggle Component with dark/light/system options
---

<div class="theme-toggle">
  <button
    id="theme-toggle"
    type="button"
    class="inline-flex items-center justify-center w-10 h-10 rounded-lg text-gray-500 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700 transition-all duration-200"
    aria-label="Toggle theme"
    title="Toggle theme"
  >
    <!-- Light mode icon -->
    <svg class="w-5 h-5 theme-icon theme-light" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
    </svg>
    <!-- Dark mode icon -->
    <svg class="w-5 h-5 theme-icon theme-dark hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
    </svg>
    <!-- System mode icon -->
    <svg class="w-5 h-5 theme-icon theme-system hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
    </svg>
  </button>
</div>

<script>
  class ThemeManager {
    themes: string[];
    currentThemeIndex: number;

    constructor() {
      this.themes = ['light', 'dark', 'system'];
      this.currentThemeIndex = 0;
      this.init();
    }

    init() {
      // Load saved theme or default to system
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme && this.themes.includes(savedTheme)) {
        this.setTheme(savedTheme);
      } else {
        this.setTheme('system');
      }

      // Listen for system theme changes
      if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
          if (this.getCurrentTheme() === 'system') {
            this.applyTheme();
          }
        });
      }

      // Add click handler to toggle button
      const toggleButton = document.getElementById('theme-toggle');
      if (toggleButton) {
        toggleButton.addEventListener('click', () => {
          this.cycleTheme();
        });
      }
    }

    getCurrentTheme() {
      return this.themes[this.currentThemeIndex];
    }

    setTheme(theme: string) {
      if (!this.themes.includes(theme)) return;
      
      this.currentThemeIndex = this.themes.indexOf(theme);
      localStorage.setItem('theme', theme);
      this.applyTheme();
      this.updateIcon();
    }

    cycleTheme() {
      this.currentThemeIndex = (this.currentThemeIndex + 1) % this.themes.length;
      const newTheme = this.getCurrentTheme();
      localStorage.setItem('theme', newTheme);
      this.applyTheme();
      this.updateIcon();
    }

    applyTheme() {
      const theme = this.getCurrentTheme();
      const html = document.documentElement;
      
      // Remove existing theme classes
      html.classList.remove('light', 'dark');
      
      if (theme === 'system') {
        // Use system preference
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        html.classList.add(prefersDark ? 'dark' : 'light');
      } else {
        html.classList.add(theme);
      }
    }

    updateIcon() {
      const theme = this.getCurrentTheme();
      const icons = document.querySelectorAll('.theme-icon');
      
      // Hide all icons
      icons.forEach(icon => icon.classList.add('hidden'));
      
      // Show the appropriate icon
      const activeIcon = document.querySelector(`.theme-${theme}`);
      if (activeIcon) {
        activeIcon.classList.remove('hidden');
      }
    }
  }

  // Initialize theme manager when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ThemeManager();
    });
  } else {
    new ThemeManager();
  }
</script>

<style>
  .theme-toggle {
    position: relative;
  }

  .theme-icon {
    transition: opacity 0.2s ease-in-out;
  }

  #theme-toggle:focus {
    outline: none;
  }

  /* Ensure smooth transitions for theme changes */
  html {
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
</style>
